import logging, asyncio, _config
from FIREBASE import FireBase
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command

firebase = FireBase()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
API_TOKEN = _config.BOT_TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command('start'))
async def welcome(message: types.Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ FireBase."""
    user_id = str(message.from_user.id)
    user_name = message.from_user.full_name

    response = firebase.init(user_id, user_name)

    if response["status"] == "success":
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç {user_name}! {response['message']}")
    else:
        await message.answer(f"–û—à–∏–±–∫–∞: {response['message']}")


@dp.message(Command('help'))
async def welcome(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    help_text = (
        "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üîπ <b>/start</b> ‚Äì –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è)\n"
        "üîπ <b>/add_bank</b> ‚Äì –î–æ–±–∞–≤–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç\n"
        "üîπ <b>/show_bank_accounts</b> ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞ –∏ –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å\n"
        "üîπ <b>/delete_bank</b> ‚Äì –£–¥–∞–ª–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–∏–π —Å—á–µ—Ç\n"
        "üîπ <b>/add_debt</b> ‚Äì –î–æ–±–∞–≤–∏—Ç—å –¥–æ–ª–≥\n"
        "üîπ <b>/show_debts</b> ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ–ª–≥–∏ –∏ –æ–±—â—É—é —Å—É–º–º—É –¥–æ–ª–≥–æ–≤\n"
        "üîπ <b>/delete_debt</b> ‚Äì –£–¥–∞–ª–∏—Ç—å –¥–æ–ª–≥\n"
        "üîπ <b>/help</b> ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
    )

    await message.answer(help_text, parse_mode="HTML")


@dp.message(Command('add_debt'))
async def add_debt(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –¥–æ–ª–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = str(message.from_user.id)

    await message.answer(
        "üìù *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ª–≥–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "`–ù–∞–∑–≤–∞–Ω–∏–µ_–¥–æ–ª–≥–∞ –°—É–º–º–∞ –î–∞—Ç–∞(DD.MM.YYYY)`\n\n"
        "üìå *–ü—Ä–∏–º–µ—Ä:* `Kaspi –ö—Ä–µ–¥–∏—Ç 50000 25.04.2025`",
        parse_mode="Markdown"
    )

    @dp.message()
    async def process_debt_input(msg: types.Message):
        try:
            parts = msg.text.rsplit(" ", 2)
            if len(parts) != 3:
                await msg.answer(
                    "‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `–ù–∞–∑–≤–∞–Ω–∏–µ_–¥–æ–ª–≥–∞ –°—É–º–º–∞ –î–∞—Ç–∞(DD.MM.YYYY)`\n\n"
                    "üìå *–ü—Ä–∏–º–µ—Ä:* `Kaspi –ö—Ä–µ–¥–∏—Ç 50000 25.04.2025`",
                    parse_mode="Markdown"
                )
                return

            debt_name, amount, due_date = parts[0], parts[1], parts[2]
            response = firebase.add_debt(user_id, debt_name, amount, due_date)

            if response["status"] == "success":
                await msg.answer(
                    f"‚úÖ *–î–æ–ª–≥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                    f"üìå *–ù–∞–∑–≤–∞–Ω–∏–µ:* `{debt_name}`\n"
                    f"üí∞ *–°—É–º–º–∞:* `{amount} ‚Ç∏`\n"
                    f"üìÖ *–î–∞—Ç–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞:* `{due_date}`\n\n"
                    "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –¥–æ–ª–≥–∏ –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /show_debts",
                    parse_mode="Markdown"
                )
            else:
                await msg.answer(f"‚ùå *–û—à–∏–±–∫–∞:* {response['message']}", parse_mode="Markdown")

        except Exception as e:
            await msg.answer(f"‚ùå *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:* {str(e)}", parse_mode="Markdown")


@dp.message(Command('show_debts'))
async def show_debts(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –¥–æ–ª–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    user_id = str(message.from_user.id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Firebase
    response = firebase.get_debts(user_id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
    if response["status"] == "success" and response["debts"]:
        debts = response["debts"]
        total_debt = sum(float(debt_info['amount']) for debt_info in debts.values())  # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –¥–æ–ª–≥–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ª–≥–∞–º–∏
        debts_message = "üìå *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–æ–ª–≥–∏:*\n\n"
        for debt_name, debt_info in debts.items():
            debts_message += (
                f"*{debt_name}*\n"
                f"   üí∞ *–°—É–º–º–∞:* `{debt_info['amount']} ‚Ç∏`\n"
                f"   üìÖ *–î–æ:* `{debt_info['due_date']}`\n\n"
            )

        debts_message += f"üí∞ *–û–±—â–∏–π –¥–æ–ª–≥:* `{total_debt} ‚Ç∏`"

        await message.answer(debts_message, parse_mode="Markdown")
    else:
        await message.answer("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –¥–æ–ª–≥–æ–≤!", parse_mode="Markdown")


@dp.message(Command('add_bank'))
async def add_bank_account(message: types.Message):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞."""
    user_id = str(message.from_user.id)  # –§–∏–∫—Å–∏—Ä—É–µ–º user_id –Ω–∞ —É—Ä–æ–≤–Ω–µ —Ñ—É–Ω–∫—Ü–∏–∏

    await message.answer(
        "üè¶ *–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "```\n–ù–∞–∑–≤–∞–Ω–∏–µ_–ë–∞–Ω–∫–∞ –°—É–º–º–∞\n```\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "```\nKaspi Gold 1000.50\n```",
        parse_mode="Markdown"
    )

    @dp.message(lambda msg: True)
    async def process_bank_input(msg: types.Message):
        nonlocal user_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            parts = msg.text.rsplit(" ", 1)  
            if len(parts) != 2:
                await msg.answer("‚ùå *–û—à–∏–±–∫–∞:* –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞!\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫:\n```\nKaspi Gold 1000.50\n```", parse_mode="Markdown")
                return

            name_bank, value = parts[0], parts[1]
            response = firebase.add_bank_account(user_id, name_bank, value)

            if response["status"] == "success":
                await msg.answer(
                    f"‚úÖ *–°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!*\n\n"
                    f"üè¶ *–ë–∞–Ω–∫:* `{response['data']['bank']}`\n"
                    f"üí∞ *–°—É–º–º–∞:* `{response['data']['value']} ‚Ç∏`\n\n"
                    f"üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞: `/show_bank_accounts`",
                    parse_mode="Markdown"
                )
            else:
                await msg.answer(f"‚ùå *–û—à–∏–±–∫–∞:* {response['message']}", parse_mode="Markdown")

        except Exception as e:
            await msg.answer(f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:* `{str(e)}`", parse_mode="Markdown")


@dp.message(Command('show_bank_accounts'))
async def show_bank_accounts(message: types.Message):
    """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = str(message.from_user.id)
    response = firebase.get_bank_accounts(user_id)

    if response["status"] == "error":
        await message.answer(f"‚ùå {response['message']}")
        return

    bank_accounts = response["data"]

    if not bank_accounts:
        await message.answer("‚ÑπÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é /add_bank")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤
    accounts_list = "\n".join([f"üè¶ {bank}: {balance}" for bank, balance in bank_accounts.items()])
    response_text = f"üìä **–í–∞—à–∏ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Å—á–µ—Ç–∞:**\n\n{accounts_list}"
    total_balance = sum(bank_accounts.values()) if bank_accounts else 0
    
    await message.answer(f"{response_text}\n\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–∞—Ö: {total_balance}", parse_mode="Markdown")


@dp.message(Command("delete_bank"))
async def delete_bank_step_1(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = str(message.from_user.id)
    bank_data = firebase.get_bank_accounts(user_id)  # –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –∏ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
    if bank_data["status"] == "error":
        await message.answer(f"‚ùå *–û—à–∏–±–∫–∞:* {bank_data['message']}", parse_mode="Markdown")
        return

    bank_accounts = bank_data["data"]  # –î–∞–Ω–Ω—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–ª—é—á–µ "data"

    if not bank_accounts:
        await message.answer("‚ùå *–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö —Å—á–µ—Ç–æ–≤.*", parse_mode="Markdown")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –±–∞–Ω–∫–æ–≤
    bank_list = "\n".join([f"`{bank}`" for bank in bank_accounts.keys()])

    await message.answer(
        "üóë *–£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á–µ—Ç–∞*\n\n"
        "–í–≤–µ–¥–∏—Ç–µ *–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∫–∞*, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n"
        f"{bank_list}\n\n"
        "üìå *–°–æ–≤–µ—Ç:* –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –±–∞–Ω–∫, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ.",
        parse_mode="Markdown"
    )

    @dp.message()
    async def delete_bank_step_2(message: types.Message):
        """–£–¥–∞–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –±–∞–Ω–∫."""
        user_id = str(message.from_user.id)
        bank_name = message.text.strip()

        response = firebase.delete_bank_account(user_id, bank_name)

        await message.answer(response["message"])


@dp.message(Command("delete_debt"))
async def delete_debt_step_1(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–ª–≥–æ–≤ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
    user_id = str(message.from_user.id)
    debt_data = firebase.get_debts(user_id)

    if debt_data["status"] == "error":
        await message.answer(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤. {debt_data['message']}")
        return

    debts_list = "\n".join([f"`{debt}`" for debt in debt_data["debts"].keys()])

    await message.answer(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–≥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:\n\n{debts_list}",
        parse_mode="Markdown"
    )

    @dp.message()
    async def delete_debt_step_2(message: types.Message):
        """–£–¥–∞–ª—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ–ª–≥."""
        user_id = str(message.from_user.id)
        debt_name = message.text.strip()

        response = firebase.delete_debt(user_id, debt_name)

        await message.answer(response["message"])


async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
